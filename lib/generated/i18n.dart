import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes
// ignore_for_file: unnecessary_brace_in_string_interps

//WARNING: This file is automatically generated. DO NOT EDIT, all your changes would be lost.

typedef LocaleChangeCallback = void Function(Locale locale);

class I18n implements WidgetsLocalizations {
  const I18n();
  static Locale _locale;
  static bool _shouldReload = false;

  static set locale(Locale newLocale) {
    _shouldReload = true;
    I18n._locale = newLocale;
  }

  static const GeneratedLocalizationsDelegate delegate = GeneratedLocalizationsDelegate();

  /// function to be invoked when changing the language
  static LocaleChangeCallback onLocaleChanged;

  static I18n of(BuildContext context) =>
    Localizations.of<I18n>(context, WidgetsLocalizations);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  /// "Log In"
  String get authLoginTitle => "Log In";
  /// "Sign Up"
  String get authRegisterTitle => "Sign Up";
  /// "Forgot Password"
  String get authForgotPasswordTitle => "Forgot Password";
  /// "Email Address"
  String get authFormFieldsEmail => "Email Address";
  /// "Password"
  String get authFormFieldsPassword => "Password";
  /// "Confirm Password"
  String get authFormFieldsConfirmPassword => "Confirm Password";
  /// "Name"
  String get authFormFieldsName => "Name";
}

class _I18n_en_US extends I18n {
  const _I18n_en_US();

  @override
  TextDirection get textDirection => TextDirection.ltr;
}

class _I18n_hi_IN extends I18n {
  const _I18n_hi_IN();

  /// "लॉगिन"
  @override
  String get authLoginTitle => "लॉगिन";
  /// "साइन अप करें"
  @override
  String get authRegisterTitle => "साइन अप करें";
  /// "पासवर्ड भूल गए"
  @override
  String get authForgotPasswordTitle => "पासवर्ड भूल गए";
  /// "ईमेल पता"
  @override
  String get authFormFieldsEmail => "ईमेल पता";
  /// "पारण शब्द"
  @override
  String get authFormFieldsPassword => "पारण शब्द";
  /// "पासवर्ड की पुष्टि कीजिये"
  @override
  String get authFormFieldsConfirmPassword => "पासवर्ड की पुष्टि कीजिये";
  /// "नाम"
  @override
  String get authFormFieldsName => "नाम";

  @override
  TextDirection get textDirection => TextDirection.ltr;
}

class _I18n_bi_IN extends I18n {
  const _I18n_bi_IN();

  /// "लॉगिन"
  @override
  String get authLoginTitle => "लॉगिन";
  /// "साइन अप करें"
  @override
  String get authRegisterTitle => "साइन अप करें";
  /// "पासवर्ड भूल गए"
  @override
  String get authForgotPasswordTitle => "पासवर्ड भूल गए";
  /// "ईमेल पता"
  @override
  String get authFormFieldsEmail => "ईमेल पता";
  /// "पारण शब्द"
  @override
  String get authFormFieldsPassword => "पारण शब्द";
  /// "पासवर्ड की पुष्टि कीजिये"
  @override
  String get authFormFieldsConfirmPassword => "पासवर्ड की पुष्टि कीजिये";
  /// "नाम"
  @override
  String get authFormFieldsName => "नाम";

  @override
  TextDirection get textDirection => TextDirection.ltr;
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<WidgetsLocalizations> {
  const GeneratedLocalizationsDelegate();
  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("en", "US"),
      Locale("hi", "IN"),
      Locale("bi", "IN")
    ];
  }

  LocaleResolutionCallback resolution({Locale fallback}) {
    return (Locale locale, Iterable<Locale> supported) {
      if (isSupported(locale)) {
        return locale;
      }
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    };
  }

  @override
  Future<WidgetsLocalizations> load(Locale locale) {
    I18n._locale ??= locale;
    I18n._shouldReload = false;
    final String lang = I18n._locale != null ? I18n._locale.toString() : "";
    final String languageCode = I18n._locale != null ? I18n._locale.languageCode : "";
    if ("en_US" == lang) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_en_US());
    }
    else if ("hi_IN" == lang) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_hi_IN());
    }
    else if ("bi_IN" == lang) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_bi_IN());
    }
    else if ("en" == languageCode) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_en_US());
    }
    else if ("hi" == languageCode) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_hi_IN());
    }
    else if ("bi" == languageCode) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_bi_IN());
    }

    return SynchronousFuture<WidgetsLocalizations>(const I18n());
  }

  @override
  bool isSupported(Locale locale) {
    for (var i = 0; i < supportedLocales.length && locale != null; i++) {
      final l = supportedLocales[i];
      if (l.languageCode == locale.languageCode) {
        return true;
      }
    }
    return false;
  }

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => I18n._shouldReload;
}